import streamlit as st
import pandas as pd
import os
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import time
from functions import *
import base64
st.set_page_config(
    layout = 'wide',
    page_title = 'Case GUARDIAN ASSET'
    )
@st.cache_data
def get_img_as_base64(file):
    with open(file, "rb") as f:
        data = f.read()
    return base64.b64encode(data).decode()


img = get_img_as_base64("image.jpg")

page_bg_img = f"""
    <style>
    [data-testid="stAppViewContainer"] > .main {{
    background-image: url("https://media.licdn.com/dms/image/C4D1BAQFph9x17nqZJw/company-background_10000/0/1610146397383/guardian_capital_gestora_de_recursos_s_a_cover?e=1710435600&v=beta&t=nNnbQS1gM2cmj07OC9lOL9QOhSTvjwZCUeappY1SYpo");
    background-size: 100%;
    background-position: top left;

    background-attachment: local;
    }}

    [data-testid="stSidebar"] > div:first-child {{
    background-image: url("data:image/png;base64,{img}");
    background-position: center; 

    background-attachment: fixed;
    }}

    [data-testid="stHeader"] {{
    background: rgba(0,0,0,0);
    }}

    [data-testid="stToolbar"] {{
    right: 2rem;
    }}
    </style>
    """

if st.sidebar.checkbox('desabilitar imagens de fundo',key='bg_on_off'):

    page_bg_img = f"""
    <style>


    [data-testid="stHeader"] {{
    background: rgba(0,0,0,0);
    }}

    [data-testid="stToolbar"] {{
    right: 2rem;
    }}
    </style>
    """
st.markdown(page_bg_img, unsafe_allow_html=True)
# st.session_state
########################################################################################################################
try: 
    ms = st.session_state
    if "themes" not in ms: 
        ms.themes = {"current_theme": "dark",
                        "refreshed": True,
                        
                        "light": {"theme.base": "dark", 
                                "theme.primaryColor": "#FF4B4B", # c98bdb  
                                "theme.backgroundColor": "#FFFFFF", # black
                                "theme.textColor": "#31333F", # white
                                "theme.secondaryBackgroundColor": "#F0F2F6", # 5591f5
                                "button_face": "üåú"},

                        "dark":  {"theme.base": "light",
                                "theme.primaryColor": "#FF4B4B", # 5591f5 
                                "theme.backgroundColor": "#0E1117", # white
                                "theme.textColor": "#FAFAFA", # 0a1464
                                "theme.secondaryBackgroundColor": "#262730", # 82E1D7
                                "button_face": "üåû"},
                        }
    
    def ChangeTheme():
        previous_theme = ms.themes["current_theme"]
        tdict = ms.themes["light"] if ms.themes["current_theme"] == "light" else ms.themes["dark"]
        for vkey, vval in tdict.items(): 
            if vkey.startswith("theme"): st._config.set_option(vkey, vval)

        ms.themes["refreshed"] = False
        if previous_theme == "dark": ms.themes["current_theme"] = "light"
        elif previous_theme == "light": ms.themes["current_theme"] = "dark"


    btn_face = ms.themes["light"]["button_face"] if ms.themes["current_theme"] == "light" else ms.themes["dark"]["button_face"]
    st.sidebar.button(btn_face, on_click=ChangeTheme)

    if ms.themes["refreshed"] == False:
        ms.themes["refreshed"] = True
        st.rerun()
except:
    pass

################################

col1,col2 = st.columns([0.2,0.8])
with col2:
    st.title('RESOLU√á√ÉO DO CASE - GUARDIAN-ASSET')
with col1:
    st.image('https://media.licdn.com/dms/image/C560BAQFoFX4_O4YFjA/company-logo_200_200/0/1630650151370/guardian_capital_gestora_de_recursos_s_a_logo?e=1717632000&v=beta&t=IH8eSlq68yL83p_2Bm1rDeaKEFjjiO10qn-Sw7IhpDo')

escolha = st.selectbox('o que deseja ver',['clique para escolher','pular para a an√°lise','ver constru√ß√£o'])
if escolha == 'ver constru√ß√£o':
    if st.session_state.bg_on_off:
        pass
    else:

        page_bg_img = f"""
        <style>
        [data-testid="stAppViewContainer"] > .main {{
        background-image: url("https://media.licdn.com/dms/image/C4D1BAQFph9x17nqZJw/company-background_10000/0/1610146397383/guardian_capital_gestora_de_recursos_s_a_cover?e=1710435600&v=beta&t=nNnbQS1gM2cmj07OC9lOL9QOhSTvjwZCUeappY1SYpo");
        background-size: 180%;
        background-position: top left;

        background-attachment: local;
        }}

        [data-testid="stSidebar"] > div:first-child {{
        background-image: url("data:image/png;base64,{img}");
        background-position: center; 

        background-attachment: fixed;
        }}

        [data-testid="stHeader"] {{
        background: rgba(0,0,0,0);
        }}

        [data-testid="stToolbar"] {{
        right: 2rem;
        }}
        </style>
        """
        st.markdown(page_bg_img, unsafe_allow_html=True)
    df_cobranca = pd.read_excel('planilhas/Dados Cobranca - Parte 1.xlsx')
    if st.checkbox('VER DATAFRAME COMPLETO'):
        st.dataframe(df_cobranca)


    # df_cobranca = pd.read_excel('planilhas/Dados Cobranca - Parte 1.xlsx')
    # if st.checkbox('VER DATAFRAME M√âDIAS'):k

    option1 = st.radio('Escolha uma empresa para analisar', list((df_cobranca['Cobrador'].value_counts().index)), horizontal = True)
    df_cobranca.loc[df_cobranca['Cobrador'] == option1]
    st.divider()

    por_cobrador_media = df_cobranca.groupby('Cobrador')[['Valor de Parcela', 'Valor Pago']].mean()

    st.subheader('M√âDIA DOS PAGAMENTOS E AFINS',divider='rainbow')
    por_cobrador_media['PRE√áO_CUSTO'] = [10000,9000,3000,7000]
    por_cobrador_media['diferenca_bruta'] = (por_cobrador_media['Valor de Parcela'] - por_cobrador_media['Valor Pago']).round(2).apply(lambda x : f'{x} R$ n√£o recuperados em m√©dia' )
    por_cobrador_media['diferenca_relativa'] = (((por_cobrador_media['Valor Pago'] / por_cobrador_media['Valor de Parcela'])) * 100).round(2).apply(lambda x : f'{x} % recuperados em m√©dia')
    por_cobrador = por_cobrador_media[['PRE√áO_CUSTO', 'Valor de Parcela', 'Valor Pago', 'diferenca_relativa', 'diferenca_bruta']]
    st.dataframe(por_cobrador_media, use_container_width = True)

    st.subheader('AQUI, VEMOS UMA TABELA DA SOMA, PARA VER SE A MEDIA EST√Å EM HARMONIA COM A SOMA TOTAL',divider='rainbow')

    por_cobrador_soma = df_cobranca.groupby('Cobrador')[['Valor de Parcela', 'Valor Pago']].sum()
    por_cobrador_soma['PRE√áO_CUSTO'] = [10000,9000,3000,7000]
    por_cobrador_soma['diferenca_bruta'] = (por_cobrador_soma['Valor de Parcela'] - por_cobrador_soma['Valor Pago']).round(2).apply(lambda x : f'{x} R$ n√£o recuperados no total' )
    por_cobrador_soma['diferenca_relativa'] = (((por_cobrador_soma['Valor Pago'] / por_cobrador_soma['Valor de Parcela'])) * 100).round(2).apply(lambda x : f'{x} % recuperados em m√©dia')
    por_cobrador = por_cobrador_soma[['PRE√áO_CUSTO', 'Valor de Parcela', 'Valor Pago', 'diferenca_relativa', 'diferenca_bruta']]
    st.dataframe(por_cobrador_soma, use_container_width = True)

    st.header('TERM√îMETRO DE PRE√áO DOS SERVI√áOS', divider='rainbow')
    col1, col2, col3 = st.columns(3)
    with col1:
        st.subheader('contagem de clientes por cobrador')
        st.dataframe(df_cobranca['Cobrador'].value_counts(), use_container_width = True)#.style.applymap(destaque_max_min)

    with col2:
        st.subheader('pre√ßo do servi√ßo de cada cobrador')
        st.dataframe(por_cobrador_soma['PRE√áO_CUSTO'].apply(lambda x : f'{x} R$'), use_container_width = True)

    with col3:
        st.subheader('CUSTO POR SERVI√áO(pessoa atendida) M√âDIO')
        # por_cobrador['']
        por_cobrador['PRE√áO_CUSTO'] / df_cobranca['Cobrador'].value_counts()
    st.divider()


    df_cobranca
    st.subheader('ZERAMENTO DE PAGAMENTO DE PARCELAS',divider='rainbow')

    # st.dataframe(df_cobranca.groupby('Cobrador')df_cobranca[['Valor Pago'] == 0].count())
    st.dataframe((df_cobranca.loc[df_cobranca['Valor Pago'] == 0])['Cobrador'].value_counts())

    st.subheader('M√âDIA DO VENCIMENTO DAS PARCELAS',divider='rainbow')
    # st.dataframe(df_cobranca.info())

    df_cobranca['tempo_pgto'] = df_cobranca['Data de Cobran√ßa'] - df_cobranca['Data de Vencimento']
    df_cobranca['tempo_pgto'] = df_cobranca['tempo_pgto']
    df_cobranca['tempo_pgto_dias'] = df_cobranca['tempo_pgto'].apply(lambda x: f'{x} dias' if pd.notnull(x) else np.nan)

    df_cobranca

    mes_por_grupo = df_cobranca.groupby('Cobrador')['tempo_pgto'].mean().dt.days.apply(lambda x : f'{x} dias')
    st.dataframe(mes_por_grupo)

if escolha == 'pular para a an√°lise':

    if st.session_state.bg_on_off:
        pass
    else:

        page_bg_img = f"""
        <style>
        [data-testid="stAppViewContainer"] > .main {{
        background-image: url("https://media.licdn.com/dms/image/C4D1BAQFph9x17nqZJw/company-background_10000/0/1610146397383/guardian_capital_gestora_de_recursos_s_a_cover?e=1710435600&v=beta&t=nNnbQS1gM2cmj07OC9lOL9QOhSTvjwZCUeappY1SYpo");
        background-size: 180%;
        background-position: top left;

        background-attachment: local;
        }}

        [data-testid="stSidebar"] > div:first-child {{
        background-image: url("data:image/png;base64,{img}");
        background-position: center; 

        background-attachment: fixed;
        }}

        [data-testid="stHeader"] {{
        background: rgba(0,0,0,0);
        }}

        [data-testid="stToolbar"] {{
        right: 2rem;
        }}
        </style>
        """
        st.markdown(page_bg_img, unsafe_allow_html=True)

######################################################
    df_cobranca = pd.read_excel('planilhas/Dados Cobranca - Parte 1.xlsx')
    por_cobrador_media = df_cobranca.groupby('Cobrador')[['Valor de Parcela', 'Valor Pago']].mean()

    por_cobrador_media['PRE√áO_CUSTO'] = [10000,9000,3000,7000]
    por_cobrador_media['diferenca_bruta'] = (por_cobrador_media['Valor de Parcela'] - por_cobrador_media['Valor Pago']).round(2).apply(lambda x : f'{x} R$ n√£o recuperados em m√©dia' )
    por_cobrador_media['diferenca_relativa'] = (((por_cobrador_media['Valor Pago'] / por_cobrador_media['Valor de Parcela'])) * 100).round(2).apply(lambda x : f'{x} % recuperados em m√©dia')
    por_cobrador = por_cobrador_media[['PRE√áO_CUSTO', 'Valor de Parcela', 'Valor Pago', 'diferenca_relativa', 'diferenca_bruta']]


    por_cobrador_soma = df_cobranca.groupby('Cobrador')[['Valor de Parcela', 'Valor Pago']].sum()
    por_cobrador_soma['PRE√áO_CUSTO'] = [10000,9000,3000,7000]
    por_cobrador_soma['diferenca_bruta'] = (por_cobrador_soma['Valor de Parcela'] - por_cobrador_soma['Valor Pago']).round(2).apply(lambda x : f'{x} R$ n√£o recuperados no total' )
    por_cobrador_soma['diferenca_relativa'] = (((por_cobrador_soma['Valor Pago'] / por_cobrador_soma['Valor de Parcela'])) * 100).round(2).apply(lambda x : f'{x} % recuperados em m√©dia')
    por_cobrador = por_cobrador_soma[['PRE√áO_CUSTO', 'Valor de Parcela', 'Valor Pago', 'diferenca_relativa', 'diferenca_bruta']]

    df_cobranca['tempo_pgto'] = df_cobranca['Data de Cobran√ßa'] - df_cobranca['Data de Vencimento']
    df_cobranca['tempo_pgto'] = df_cobranca['tempo_pgto']
    df_cobranca['tempo_pgto_dias'] = df_cobranca['tempo_pgto'].apply(lambda x: f'{x} dias' if pd.notnull(x) else np.nan)
    mes_por_grupo = df_cobranca.groupby('Cobrador')['tempo_pgto'].mean().dt.days.apply(lambda x : f'{x} dias')




######################################################
    st.header('CONFIGURE SUAS PREFER√äNCIAS')
    tempo_escrita = st.slider('velocidade de escrita do texto',0.00,0.10,0.04)
    tempo_pausa = st.slider('tempo de intervalo entre as an√°lises',0,50,10)

    st.title('VER A AN√ÅLISE')


    if st.button('conferir analise dos cobradores'):

        _LOREM_IPSUM = """
            De primeiro momento, apenas com a leitura do enunciado,
            notamos que a empresa C √© a mais barata disparadamente, e a empresa
            A √© a mais cara. Isso nos leva  a alguns pensamentos, do tipo se de fato,
            uma empresa que cobra barato tem um bom servi√ßo, ou at√© melhor, este
            valor cobrado √© pelo servi√ßo inteiro, ser√° que a quantidade de empresas 
            ela atendeu foi menor ou de fato ela tem um pre√ßo muito mais abaixo do
            mercado de suas concorrentes? Ser√° que ela por cobrar mais barato tem um servi√ßo
            pior? Ser√° que quanto mais caro, melhor o servi√ßo..?

            Muitas d√∫vidas surgem ao ver apenas os dados puros, e ent√£o, √© necess√°rio filtrar 
            os dados para obter alguns insights sobre o que de fato, est√° acontecendo. 
            Primeiro de tudo, a principal coisa a se fazer √© agrupar os dados por empresa 
            cobradora. 
            """


        def stream_data():
            for word in _LOREM_IPSUM.split():
                yield word + " "
                time.sleep(tempo_escrita)


        st.write_stream(stream_data)
        st.header('conferindo m√©dia dos pagamentos e afins',divider='rainbow')
        st.dataframe(por_cobrador_media)
        _LOREM_IPSUM = '''
        Aqui, podemos analisar que o valor M√âDIO das parcelas no grupo C √© maior, mas
        por outro lado, o valor pago no final pelos alunos tamb√©m √©. Fazendo uma an√°lise simples 
        com seu concorrente D que tem o mesmo valor m√©dio de valor da parcela,
        pode-senotar que a empresa C ja leva uma vantagem sob a empresa D, pois pode-se
        notar um valor muito inferior das parcelas efetivamente pagas pelos alunos na cobradora D 
        comparando com a cobradora C. Fazendo a an√°lise geral, observa-se que a empresa C 
        leva vantagem  disparada em efici√™ncia para fazer com que as pessoas de fato 
        paguem a faculdade. Com uma margem de 75,2 % recuperados, ela lidera o melhor lugar 
        com 15%  de diferen√ßa da segunda melhor, que √© a B, com 60% em m√©dia.
        
        '''
        st.write_stream(stream_data)
        st.divider()
        # time.sleep(10)
########################################
        progress_text = "tempo de espera..."
        my_bar = st.progress(0, text=progress_text)

        for percent_complete in range(100):
            time.sleep(tempo_pausa/100)
            my_bar.progress(percent_complete + 1, text=progress_text)

########################################
        st.header('Verificando a soma por grupo de cobrador',divider='rainbow')

        _LOREM_IPSUM = '''
        Ao observarmos a soma das parcelas e o valor efetivamente pago, podemos chamar aten√ß√£o ao grupo B e A principalmente, onde que por uma diferen√ßa dde 3%, na
        margem de convers√£o, a diferen√ßa bruta se deu quase que dobrada. Aqui podemos pensar o que pode realmente estar causando isso, e uma das raz√µes √© de umm grupo ter atendio mais clientes que
        o outro grupo. Portanto, analisar o pre√ßo por completo n√£o √© uma maneira boa e analisar o desempenho de cada grupo comparativamente com os outros. Para isso, podemos calcular o custo por servi√ßo 
        e cada empresa, simplesmente pegando o custo total e dividindo pela quantidade de clientes alcan√ßadas. o resultado vemos aqui nas tabelas abaixo. 
        
        '''
        st.write_stream(stream_data)
        st.divider()
        st.header('TERM√îMETRO DE PRE√áO DOS SERVI√áOS', divider='rainbow')
        col1, col2, col3 = st.columns(3)
        with col1:
            st.subheader('contagem de clientes por cobrador')
            st.dataframe(df_cobranca['Cobrador'].value_counts(), use_container_width = True)#.style.applymap(destaque_max_min)

        with col2:
            st.subheader('pre√ßo do servi√ßo de cada cobrador')
            st.dataframe(por_cobrador_soma['PRE√áO_CUSTO'].apply(lambda x : f'{x} R$'), use_container_width = True)

        with col3:
            st.subheader('CUSTO POR SERVI√áO(pessoa atendida) M√âDIO')
            # por_cobrador['']
            por_servico = por_cobrador['PRE√áO_CUSTO'] / df_cobranca['Cobrador'].value_counts()
            por_servico = por_servico.to_frame('valor m√©dio por servi√ßo')
            st.dataframe(por_servico,use_container_width=True)#.apply(lambda val: 'background-color: green' if val == 187.5 else ('background-color: red' if val == 375 else ''))

        _LOREM_IPSUM = '''
            Vimos aqui na tabela ent√£o que o pre√ßo cobrado de 3000 reais da cobradora C √© mais baixo pois atende menos clientes mas de fato ele √© um servi√ßo mais barato que os outros e tambpem mais eficiente,
            visto que a taxa de convers√£o dos contratos √© maior por um pre√ßo de custo por servi√ßo m√©dio mais barato , tamb√©m. N√£o podemos afirmar que a eficiencia foi oriunda da menor quantiadde de clientes atendidos, pois 
            ent√£o poderia dar mais aten√ß√£o para cada um individualmente, mas o fato √© que o servi√ßo apresentado por ela, inicialmente √© melhor e mais barato. Por utro lado, o servi√ßo da cobradora A mesmo sendo o mais caro no total,
            vemos que isso se deu a quantidade de clientes que ela atendeu, pois sua m√©dia por servi√ßo √© de apenas 200 reais,
            bem pr√≥ximo inclusive da C, por√©m a efetividade de convers√£o da A √© bem inferior a da C, como ja vimos antes. 
            
            '''

        st.write_stream(stream_data)
        # time.sleep(10)
########################################
        progress_text = "tempo de espera..."
        my_bar = st.progress(0, text=progress_text)

        for percent_complete in range(100):
            time.sleep(tempo_pausa/100)
            my_bar.progress(percent_complete + 1, text=progress_text)

########################################
        st.divider()
        st.header('ainda h√° outras possiveis analises a se fazer',divider='rainbow')

        _LOREM_IPSUM = '''
        Podemos analisar tambem o quanto cada cobradora foi eficaz no sentido de pelo menos fazer com que o cliente pagasse uma parte do valor da parcela. No caso, como podemos ver no dataframe ao lado, a C foi 
        a  que tambem, mais conseguiu ter sucesso converter pelo menos uma parte do valor da parcela em caixa para a faculadde, com apenas 6,25% n√£o pagando nada, enquanto a A, foi a segunda melhor, com 24%.
        
        '''
        col1,col2,col3 = st.columns([0.4,0.25,0.35])
        with col1:
            st.write_stream(stream_data)
        with col2:
            st.subheader('qtde de zeramentos')
            st.dataframe((df_cobranca.loc[df_cobranca['Valor Pago'] == 0])['Cobrador'].value_counts(),use_container_width=True)
        with col3:
            st.subheader('qtde de zeramentos relativo')
            st.dataframe(((df_cobranca.loc[df_cobranca['Valor Pago'] == 0])['Cobrador'].value_counts() / df_cobranca['Cobrador'].value_counts() * 100),use_container_width=True)

        st.divider()
########################################
        progress_text = "tempo de espera..."
        my_bar = st.progress(0, text=progress_text)

        for percent_complete in range(100):
            time.sleep(tempo_pausa/100)
            my_bar.progress(percent_complete + 1, text=progress_text)

########################################
        st.header('Efici√™ncia vs Prazo de tempo',divider='rainbow')

        _LOREM_IPSUM = '''
        Antes de tirar quaisquer conclus√µes finais, precisamos analisar o tempo m√©dio de cobran√ßa que cada grupo cobrador teve. Quanto menor o tempo para o cliente pagar as parcelas, mais chance do pr√≥prio n√£o pagar. 
        Ent√£o n√£o adianta nada comparar a eficiencia em receber as parcelas sem ao menos olhar o prazo em que essas foram cobradas para cada grupo cobrador. Analisando aqui a tabela ao lado, vimis que o grupo C tamb√©m leva uma
        vantagem sob esse aspecto, onde com menos tempo para conseguir cobrar, ou melhor, mais rapido os clientes da faculdade terem que pagara  faculdade, ele conseguiu atingir mmelhores resultados em termos de eficiencia 
        na convers√£o das parcelas em caixa para a faculdade. As outras tiveram um tempo relativamente igual, muita relev√¢ncia. 
        
        '''
        col1,col2 = st.columns([0.8,0.2])
        with col1:
            st.write_stream(stream_data)
        with col2:
            df_cobranca['tempo_pgto'] = df_cobranca['Data de Cobran√ßa'] - df_cobranca['Data de Vencimento']
            df_cobranca['tempo_pgto'] = df_cobranca['tempo_pgto']
            df_cobranca['tempo_pgto_dias'] = df_cobranca['tempo_pgto'].apply(lambda x: f'{x} dias' if pd.notnull(x) else np.nan)

            # df_cobranca

            mes_por_grupo = df_cobranca.groupby('Cobrador')['tempo_pgto'].mean().dt.days.apply(lambda x : f'{x} dias')
            st.dataframe(mes_por_grupo)
        # time.sleep(10)
########################################
        progress_text = "tempo de espera..."
        my_bar = st.progress(0, text=progress_text)

        for percent_complete in range(100):
            time.sleep(tempo_pausa/100)
            my_bar.progress(percent_complete + 1, text=progress_text)

########################################
        st.divider()

        st.header('O ULTIMO PONTO DE VISTA: analisando sem considerar os zeramentos',divider='rainbow')

        _LOREM_IPSUM = '''
            Aqui vamos verificar de maneira r√°pida a perfoemance dos cobradores, excluindo aqueles clientes que n√£o pagaram nada. O intuito aqui √© ver se ou pela quantidade muito alta de clientes
            que uma empresa teve ou por qualquer outro motivo que posasa ter, a empresa n√£o cosneguiou lidar com tamanha demanda e ent√£o, deixou de lado, abriu mao de alguns clientes para cuidar dos outros. Ent√£o, 
            para fins de simplificar a an√°lise e n√£o entrar em algo t√£o arbitr√°rio, verificaremos apenas a eficiencia dos grupos excluindo os zeramentos.
            '''
        col1,col2 = st.columns([0.5,0.5])
        st.write_stream(stream_data)


        st.subheader('comparando sem zeramentos VS com zeramento')
        c1,c2 = st.columns(2)
        with c1:
            st.subheader('SEM ZERAMENTOS')
            df_nulos = df_cobranca.dropna()
            por_cobrador_media = df_nulos.groupby('Cobrador')[['Valor de Parcela', 'Valor Pago']].mean()
            por_cobrador_media['PRE√áO_CUSTO'] = [10000,9000,3000,7000]
            por_cobrador_media['diferenca_bruta'] = (por_cobrador_media['Valor de Parcela'] - por_cobrador_media['Valor Pago']).round(2).apply(lambda x : f'{x} R$ perdidos' )
            por_cobrador_media['diferenca_relativa'] = (((por_cobrador_media['Valor Pago'] / por_cobrador_media['Valor de Parcela'])) * 100).round(2).apply(lambda x : f'{x} % convertidos')
            por_cobrador = por_cobrador_media[['PRE√áO_CUSTO', 'Valor de Parcela', 'Valor Pago', 'diferenca_relativa', 'diferenca_bruta']]
            st.dataframe(por_cobrador_media, use_container_width = True)
        with c2:
            st.subheader('COM ZERAMENTOS')
            por_cobrador_media = df_cobranca.groupby('Cobrador')[['Valor de Parcela', 'Valor Pago']].mean()
            por_cobrador_media['PRE√áO_CUSTO'] = [10000,9000,3000,7000]
            por_cobrador_media['diferenca_bruta'] = (por_cobrador_media['Valor de Parcela'] - por_cobrador_media['Valor Pago']).round(2).apply(lambda x : f'{x} R$ perdidos' )
            por_cobrador_media['diferenca_relativa'] = (((por_cobrador_media['Valor Pago'] / por_cobrador_media['Valor de Parcela'])) * 100).round(2).apply(lambda x : f'{x} % convertidos')
            por_cobrador = por_cobrador_media[['PRE√áO_CUSTO', 'Valor de Parcela', 'Valor Pago', 'diferenca_relativa', 'diferenca_bruta']]
            st.dataframe(por_cobrador_media, use_container_width = True)

        _LOREM_IPSUM = '''
        D√° para perceber aqui que o que puxou de fato a empresa A para baixo foi os clientes que n√£o apgaram nada para ela. isso pode se dar ao fato tanto dos clientes que foram escolhidos para a cobradora A cuidar serem
        mais chatos de lidar at√© o fato de que a empresa cobradora n√£o conseguiu lidar com a grande quantidade de clientes (a maior quantidade) e teve que abdicar de cobrar alguns e preferiram focar em outros. A empresa C
        mal mudou alguma coisa pois tinha apenas 1 zeramento e olhando para as empresas B e C, detalhe para a TOP 2 em quest√£o de custo total( cobradora B), pois seu rating de convers√£o das parcelas aumentou bastante tambem,
        mesmo ela tendo metade dos clientes que a A tem e sendo a segunda mais cara.
        A que mais melhorou, obviamente foi a D, que faz juz com a propor√ß√£o entre quantidade de zeramentos e quantidade de clientes atendidos, tendo ai quase 1/3 dos clientes sem pagar absolutamente nada. 
            
            '''

        st.write_stream(stream_data)
        # time.sleep(10)
########################################
        progress_text = "tempo de espera..."
        my_bar = st.progress(0, text=progress_text)

        for percent_complete in range(100):
            time.sleep(tempo_pausa/100)
            my_bar.progress(percent_complete + 1, text=progress_text)

########################################
        st.divider()

        st.title('CONCLUS√ïES FINAIS')
        
        _LOREM_IPSUM = '''
        Portanto, com base nas an√°lises feitas anteriormente, podemos tirar algumas conclus√µes, mas claramente ja podemos verificar que a empresa C leva vantagem absoluta em tudo.         
            '''
        st.write_stream(stream_data)

        _LOREM_IPSUM = '''
        Em rela√ß√£o ao custo e benef√≠cio e efici√™ncia, a cobradora C, apesar de cobrar o menor pre√ßo total pelo servi√ßo (R$3.000), possui a maior efici√™ncia em termos de convers√£o de pagamento. 
        Isso indica que a cobradora C n√£o s√≥ oferece um servi√ßo mais acess√≠vel em termos de custo mas tamb√©m consegue manter uma alta efic√°cia 
        na recupera√ß√£o de valores, com 75,2% das parcelas sendo efetivamente pagas.     
            '''
        st.write_stream(stream_data)
        
        _LOREM_IPSUM = '''
        A an√°lise comparativa entre as cobradoras C e D, que t√™m o mesmo valor m√©dio de parcela, destaca a vantagem da C sobre a D, especialmente no que tange √† recupera√ß√£o efetiva dos pagamentos. 
        Ainda que a D apresente um valor de parcela similar, sua efici√™ncia na recupera√ß√£o dos pagamentos √© significativamente menor. Olhando um pouco agora para a cobradora A, apesar de atender 
        o maior n√∫mero de clientes e ter o maior custo total de servi√ßo, apresenta uma efici√™ncia de convers√£o inferior √† da cobradora C. Isso sugere que a quantidade de 
        clientes atendidos e a gest√£o de casos de n√£o pagamento (zeramentos) s√£o fatores cr√≠ticos na efici√™ncia global da recupera√ß√£o de pagamentos. A cobradora C, com apenas 
        1 caso de n√£o pagamento, destaca-se pela efic√°cia na gest√£o de sua carteira de clientes.
            '''
        st.write_stream(stream_data)

        _LOREM_IPSUM = '''
        No que tange ao tempo m√©di de pagamento, ele √© um indicador relevante da press√£o sobre os clientes para a quita√ß√£o das parcelas. A cobradora C, com o menor tempo m√©dio (39 dias), 
        n√£o apenas conseguiu manter uma alta taxa de recupera√ß√£o como tamb√©m demonstrou efic√°cia na r√°pida convers√£o de pagamentos. Quando excluimos os casos de n√£o pagamento, observamos melhorias 
        na efici√™ncia de convers√£o das cobradoras A e D, o que ressalta o impacto negativo significativo dos zeramentos sobre a efici√™ncia geral.
        Ainda assim, a cobradora C mant√©m sua posi√ß√£o de lideran√ßa, evidenciando uma estrat√©gia de cobran√ßa robusta e eficaz.
            '''
        st.write_stream(stream_data)

        _LOREM_IPSUM = '''
    Sendo assim, a an√°lise dos dados sugere que a cobradora C n√£o s√≥ oferece o servi√ßo mais acess√≠vel mas tamb√©m demonstra ser a mais eficaz na recupera√ß√£o de pagamentos, 
    evidenciando uma combina√ß√£o √≥tima de estrat√©gia de precifica√ß√£o e efici√™ncia de cobran√ßa. Embora a cobradora A atenda a mais clientes, a gest√£o eficaz dos casos de 
    pagamento e a minimiza√ß√£o de zeramentos s√£o essenciais para a maximiza√ß√£o da efici√™ncia. As cobradoras precisam equilibrar o volume de clientes, a estrat√©gia de precifica√ß√£o e as 
    pr√°ticas de cobran√ßa para otimizar sua efici√™ncia e efic√°cia. 
    A estrat√©gia adotada pela cobradora C serve como um modelo eficaz nesse contexto, oferecendo li√ß√µes valiosas sobre a gest√£o de servi√ßos de cobran√ßa.
            '''
        st.write_stream(stream_data)



    st.divider()
